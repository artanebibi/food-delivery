name: CD â€“ Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      deploy_confirm:
        description: "Type YES to confirm deployment"
        required: true

jobs:
  aws_instance_prep:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check Instance State
        id: check_state
        run: |
          INSTANCE_ID="${{ secrets.EC2_INSTANCE_ID }}"
          STATE=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].State.Name" \
            --output text)
          echo "Instance state: $STATE"
          echo "state=$STATE" >> $GITHUB_OUTPUT

      - name: Start instance if stopped
        if: steps.check_state.outputs.state == 'stopped'
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}

      - name: Get Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
  deploy:
    runs-on: ubuntu-latest
    needs: aws_instance_prep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      
      - name: Copy entire repo
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no -r "$GITHUB_WORKSPACE"/* ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }}:/home/ec2-user/
      
      - name: Maven build inside ec2-instance
        run: ./mvnw clean package
        
      - name: Deploy Containers
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
            ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} "
            cd /home/ec2-user
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
          "

