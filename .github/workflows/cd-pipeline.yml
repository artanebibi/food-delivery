name: CD â€“ Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      deploy_confirm:
        description: "Type YES to confirm deployment"
        required: true

jobs:
  aws_instance_prep:
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.get_ip.outputs.public_ip }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch EC2 Instance
        id: launch_instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --launch-template LaunchTemplateId=${{ secrets.EC2_INSTANCE_ID }} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=prod-instance}]" \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for instance to be ready
        run: |
          aws ec2 wait instance-status-ok --instance-ids ${{ steps.launch_instance.outputs.instance_id }}

      - name: Get Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ steps.launch_instance.outputs.instance_id }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: aws_instance_prep
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy docker-compose.yml
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no \
            "$GITHUB_WORKSPACE/docker-compose.yml" \
            ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }}:/home/ec2-user/

      - name: Deploy Containers
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
            ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} "
            cd /home/ec2-user
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
          "
